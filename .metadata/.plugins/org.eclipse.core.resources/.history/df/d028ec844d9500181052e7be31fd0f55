package student.controller;

import java.io.File;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import student.domain.StudentVO;
import student.service.StudentService;

@Controller
@RequestMapping("/student")
public class StudentController {
	@Autowired
	private StudentService studentService;
	
	//업로드 된 파일을 저장할 경로를 주입함
	@Resource(name="uploadPath")
	private String uploadPath;
	
	@RequestMapping(value="/list", method=RequestMethod.GET)
	public String imageListAll(Model model) {
		
		List<StudentVO> students = studentService.getStudents();
		model.addAttribute("students", students);
		
		return "student/imageList";
	}
	
	
	@RequestMapping(value="/list", method=RequestMethod.GET)
	public String listAll(Model model) {
		List<StudentVO> students = studentService.getStudents();
		model.addAttribute("students",students);
		
		return "student/list";
	}
	
	@RequestMapping(value="register", method=RequestMethod.GET)
	public String registerGet() {		
		return "student/register";
	}
	
	@RequestMapping(value="register", method=RequestMethod.POST)
	public String registerPost(StudentVO studentVO) {		
		studentService.registStudent(studentVO);
		
		return "redirect:/student/list";
	}
	
	@RequestMapping(value="read", method=RequestMethod.GET)
	public String read(@RequestParam("id") String id, Model model) {		
		StudentVO studentVO = studentService.getStudent(id);
		model.addAttribute("student", studentVO);
		return "student/read";
	}
	
	@RequestMapping(value="modify", method=RequestMethod.GET)
	public String modifyGet(@RequestParam("id")String id, Model model) {
		StudentVO student = studentService.getStudent(id);
		model.addAttribute("student",student);
		
		return "student/modify";
	}
	
	@RequestMapping(value="modify", method=RequestMethod.POST)
	public String modifyPost(StudentVO studentVO) {
		studentService.changeStudent(studentVO);
		return "redirect:/student/list";
	}
	
	@RequestMapping(value="remove", method=RequestMethod.GET)
	public String removeGet(@RequestParam("id")String id) {
		studentService.removeStudent(id);
		
		return "redirect:/student/list";
	}
	//서버에 저장될 파일의 이름을 만들고 클라이언트가 업로드 한 파일(byte[] bytes)을 서버의 특정 폴더에 저장함
	private String uploadFile(String originalFilename, byte[] bytes) throws Exception
	{
		//UUID : 중복되지 않는 고유한 키 값을 설정함
		UUID uid = UUID.randomUUID();
		String savedName = uid.toString()+"_"+originalFilename;
		System.out.println("savedName : " + savedName);
		
		File target = new File(uploadPath, savedName);
		//업로드된 파일 내용 bytes를 target파일에 복사
		//즉, 클라이언트가 업로드한 내용이 서버에 저장됨
		FileCopyUtils.copy(bytes, target);
		
		
		return savedName;
	}
}
