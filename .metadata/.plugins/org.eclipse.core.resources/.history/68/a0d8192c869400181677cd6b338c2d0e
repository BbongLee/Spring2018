package mvc.upload.controller;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

@Controller
public class UploadController {

	//업로드 된 파일을 저장할 경로를 주입함
	@Resource(name="uploadPath")
	private String uploadPath;
	
	//private String uploadPath = "c:\\upload";
	
	@RequestMapping(value="/uploadForm", method=RequestMethod.GET)
	public String uploadForm() {
		return "uploadForm";
	}
	
	//MultipartFile은 업로드된 파일 데이터를 말함
	@RequestMapping(value="/uploadForm", method=RequestMethod.POST)
	public String uploadForm1(MultipartFile file, Model model) throws IOException, Exception {
		//업로드된 파일이름
		System.out.println("파일 원본 이름 : "+ file.getOriginalFilename());
		//업로드 된 파일 크기
		System.out.println("파일 크기 : "+ file.getSize());
		//업로드 된 파일의 MIME타입
		System.out.println("파일의 ContentType : "+ file.getContentType());
		
		//업로드 된 파일이 있으면
		if(file.getSize()>0) {
			//file.getBytes() : 업로드 된 파일의 내용을 byte[]로 가져옴
			String savedName = uploadFile(file.getOriginalFilename(), file.getBytes());
			
			model.addAttribute("savedName", savedName);
			model.addAttribute("originalName", file.getOriginalFilename());
			
		}
		
		return "uploadResult";
	}

	//서버에 저장될 파일의 이름을 만들고 클라이언트가 업로드 한 파일(byte[] bytes)을 서버의 특정 폴더에 저장함
	private String uploadFile(String originalFilename, byte[] bytes) throws Exception
	{
		//UUID : 중복되지 않는 고유한 키 값을 설정함
		UUID uid = UUID.randomUUID();
		String savedName = uid.toString()+"_"+originalFilename;
		System.out.println("savedName : " + savedName);
		
		File target = new File(uploadPath, savedName);
		//업로드된 파일 내용 bytes를 target파일에 복사
		//즉, 클라이언트가 업로드한 내용이 서버에 저장됨
		FileCopyUtils.copy(bytes, target);
		
		
		return savedName;
	}
	
	@RequestMapping(value="/displayFile", method=RequestMethod.GET)
	
	private static Map<String, MediaType> mediaType;
	
	static {
		mediaType = new HashMap<String, MediaType>();
		mediaType.put("JPG", MediaType.IMAGE_JPEG);
		mediaType.put("JPEG", MediaType.IMAGE_JPEG);
		mediaType.put("GIF", MediaType.IMAGE_GIF);
		mediaType.put("PNG", MediaType.IMAGE_PNG);
	}
	
	private MediaType.getMediaType(String type){
		return mediaType.get(type.toUpperCase());
	}
	
}
